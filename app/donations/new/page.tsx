"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { DashboardHeader } from "@/components/dashboard-header"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Checkbox } from "@/components/ui/checkbox"
import { Save, ArrowLeft, ChevronDown, DollarSign, User, Calendar } from "lucide-react"

export default function NewDonationPage() {
  const router = useRouter()
  const [formData, setFormData] = useState({
    donor: "",
    email: "",
    phone: "",
    amount: "",
    method: "Credit Card",
    campaign: "General Fund",
    notes: "",
    recurring: false,
    anonymous: false,
    sendReceipt: true,
    sendThankYou: true,
  })
  const [isLoading, setIsLoading] = useState(false)

  const paymentMethods = ["Credit Card", "Debit Card", "Bank Transfer", "PayPal", "Cash", "Check", "Other"]
  const campaigns = [
    "General Fund",
    "Education Initiative",
    "Community Outreach",
    "Health Workshop",
    "Youth Program",
    "Holiday Drive",
    "Emergency Relief",
  ]

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const handleSave = async () => {
    // Basic validation
    if (!formData.amount || Number.parseFloat(formData.amount) <= 0) {
      alert("Please enter a valid donation amount")
      return
    }

    if (!formData.anonymous && !formData.donor.trim()) {
      alert("Please enter donor name or mark as anonymous")
      return
    }

    if (!formData.anonymous && formData.sendReceipt && !formData.email.trim()) {
      alert("Email is required to send receipt")
      return
    }

    setIsLoading(true)
    try {
      const donation = {
        ...formData,
        amount: Number.parseFloat(formData.amount),
        date: new Date().toISOString().split("T")[0],
        status: "completed",
        createdAt: new Date().toISOString(),
        id: Date.now(), // In real app, this would be generated by the server
      }

      console.log("Adding donation:", donation)

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000))

      alert("Donation added successfully!")
      router.push("/donations")
    } catch (error) {
      console.error("Error adding donation:", error)
      alert("Error adding donation. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex flex-1 flex-col gap-4 p-4">
      <DashboardHeader
        title="Add New Donation"
        breadcrumbs={[{ label: "Donations", href: "/donations" }, { label: "Add Donation" }]}
      />

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Donor Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="h-5 w-5" />
                Donor Information
              </CardTitle>
              <CardDescription>Enter the donor's details for this donation</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="anonymous"
                  checked={formData.anonymous}
                  onCheckedChange={(checked) => handleInputChange("anonymous", checked as boolean)}
                />
                <Label htmlFor="anonymous">Anonymous Donation</Label>
              </div>

              {!formData.anonymous && (
                <>
                  <div>
                    <Label htmlFor="donor">Donor Name *</Label>
                    <Input
                      id="donor"
                      placeholder="Enter donor's full name..."
                      value={formData.donor}
                      onChange={(e) => handleInputChange("donor", e.target.value)}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="email"
                        placeholder="donor@example.com"
                        value={formData.email}
                        onChange={(e) => handleInputChange("email", e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="phone">Phone Number</Label>
                      <Input
                        id="phone"
                        type="tel"
                        placeholder="+1 (555) 123-4567"
                        value={formData.phone}
                        onChange={(e) => handleInputChange("phone", e.target.value)}
                      />
                    </div>
                  </div>
                </>
              )}
            </CardContent>
          </Card>

          {/* Donation Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="h-5 w-5" />
                Donation Details
              </CardTitle>
              <CardDescription>Specify the donation amount and payment information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="amount">Donation Amount *</Label>
                  <div className="relative">
                    <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                    <Input
                      id="amount"
                      type="number"
                      step="0.01"
                      min="0"
                      placeholder="0.00"
                      value={formData.amount}
                      onChange={(e) => handleInputChange("amount", e.target.value)}
                      className="pl-8"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="method">Payment Method</Label>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" className="w-full justify-between">
                        <span>{formData.method}</span>
                        <ChevronDown className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent className="w-full">
                      {paymentMethods.map((method) => (
                        <DropdownMenuItem key={method} onClick={() => handleInputChange("method", method)}>
                          {method}
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>

              <div>
                <Label htmlFor="campaign">Campaign/Fund</Label>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-full justify-between">
                      <span>{formData.campaign}</span>
                      <ChevronDown className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-full">
                    {campaigns.map((campaign) => (
                      <DropdownMenuItem key={campaign} onClick={() => handleInputChange("campaign", campaign)}>
                        {campaign}
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              <div>
                <Label htmlFor="notes">Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  placeholder="Any additional notes about this donation..."
                  value={formData.notes}
                  onChange={(e) => handleInputChange("notes", e.target.value)}
                  rows={3}
                />
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="recurring"
                  checked={formData.recurring}
                  onCheckedChange={(checked) => handleInputChange("recurring", checked as boolean)}
                />
                <Label htmlFor="recurring">This is a recurring donation</Label>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Actions */}
          <Card>
            <CardHeader>
              <CardTitle>Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={handleSave}
                disabled={isLoading || !formData.amount || Number.parseFloat(formData.amount) <= 0}
                className="w-full"
              >
                <Save className="h-4 w-4 mr-2" />
                {isLoading ? "Adding..." : "Add Donation"}
              </Button>

              <Button onClick={() => router.push("/donations")} variant="ghost" className="w-full">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Donations
              </Button>
            </CardContent>
          </Card>

          {/* Summary */}
          <Card>
            <CardHeader>
              <CardTitle>Donation Summary</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between text-sm">
                <span>Amount:</span>
                <span className="font-medium">${formData.amount || "0.00"}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Method:</span>
                <span>{formData.method}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Campaign:</span>
                <span>{formData.campaign}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Donor:</span>
                <span>{formData.anonymous ? "Anonymous" : formData.donor || "Not specified"}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Date:</span>
                <span>{new Date().toLocaleDateString()}</span>
              </div>
            </CardContent>
          </Card>

          {/* Communication Options */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Communication
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="sendReceipt"
                  checked={formData.sendReceipt}
                  onCheckedChange={(checked) => handleInputChange("sendReceipt", checked as boolean)}
                  disabled={formData.anonymous || !formData.email}
                />
                <Label htmlFor="sendReceipt" className={formData.anonymous || !formData.email ? "text-gray-400" : ""}>
                  Send receipt via email
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="sendThankYou"
                  checked={formData.sendThankYou}
                  onCheckedChange={(checked) => handleInputChange("sendThankYou", checked as boolean)}
                  disabled={formData.anonymous || !formData.email}
                />
                <Label htmlFor="sendThankYou" className={formData.anonymous || !formData.email ? "text-gray-400" : ""}>
                  Send thank you email
                </Label>
              </div>

              {(formData.anonymous || !formData.email) && (
                <p className="text-xs text-gray-500">Email required for communication options</p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
