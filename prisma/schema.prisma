datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
  editor
  rep
}

enum BlogStatus {
  published
  draft
  scheduled
}

enum EventStatus {
  upcoming
  draft
  completed
  cancelled
}

enum DonationStatus {
  completed
  pending
  failed
  refunded
}

enum TeamMemberStatus {
  active
  inactive
  suspended
}

enum MessageStatus {
  unread
  read
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  emailVerified DateTime?
  password String?
  name String
  phone String?
  location String?
  bio String?
  image String @default("https://res.cloudinary.com/dc8r0pdlw/image/upload/v1755290946/user_c7pd0a.png")
  role Role @default(user)
  joinDate DateTime @default(now())
  lastLogin DateTime?
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  weeklyReports Boolean @default(false)
  eventReminders Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  blogs Blog[]
  createdEvents Event[]
  donations Donation[]
  messages Message[]
  activities UserActivity[]
  accounts      Account[]
  addedTeamMembers TeamMember[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

 // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  slug        String     @unique
  excerpt     String
  content     String     
  bannerImage String
  status      BlogStatus @default(draft)
  featured    Boolean    @default(false)
  tags        String[]
  views       Int        @default(0)
  createdBy   String     @db.ObjectId // In most cases, it's the same as authorId
  
  // Relations
  authorId    String?     @db.ObjectId
  author      User?       @relation(fields: [authorId], references: [id])
  comments    Comment[]


  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?

  @@unique([title, slug])
}

model Event {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String      @unique
  slug                 String      @unique
  detail               String?     
  excerpt               String?     
  date                 DateTime
  startTime            String
  endTime              String?
  location             String
  maxAttendees         Int?
  currentAttendees     Int         @default(0)
  bannerImage          String
  organizer            String?
  status               EventStatus @default(draft)
  featured             Boolean     @default(false)
  tags                 String[]
  ticketPrice          String?
  registrationRequired Boolean     @default(false)
  
  // Relations
  createdBy            String      @db.ObjectId
  createdByUser        User?       @relation(fields: [createdBy], references: [id])

  
  // Timestamps
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model Donation {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  donor             String?
  email             String?
  phone             String?
  amount            Float
  method            String
  campaign          String
  notes             String?
  recurring         Boolean        @default(false)
  anonymous         Boolean        @default(false)
  sendReceipt       Boolean        @default(true)
  sendThankYou      Boolean        @default(true)
  status            DonationStatus @default(completed)
  
  // Relations
  donorId           String?        @db.ObjectId
  donorUser         User?          @relation(fields: [donorId], references: [id])
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model TeamMember {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  role         String
  email        String
  phone        String?
  bio          String?
  status       TeamMemberStatus  @default(active)
  avatar       String?
  joinDate     DateTime
  department   String?
  location     String?
  skills       String[]

    // Relations
  addedBy      String     @db.ObjectId
  addedByUser  User?        @relation(fields: [addedBy], references: [id])

  
  // Social links
  linkedin     String?
  twitter      String?
  github       String?
  
  // Timestamps
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([name, role])
}

model Message {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  sender    String
  email     String
  subject   String
  content   String
  status    MessageStatus @default(unread)
  avatar    String?
  
  // Relations
  senderId  String?       @db.ObjectId
  senderUser User?        @relation(fields: [senderId], references: [id])
  
  // Timestamps
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}



model Comment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  comment         String
  authorName      String
  authorEmail     String
  blog            Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId          String @db.ObjectId
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActivity {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String      // e.g., "New blog post published"
  description   String      // e.g., "Community Outreach Program Success"
  time          DateTime    @default(now())
  userId        String?     @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model FoundationInfo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  email       String
  description String?
  address     String?
  phone       String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebsiteSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceMode     Boolean  @default(false)
  blogComments        Boolean  @default(false)
  eventRegistration  Boolean  @default(false)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}